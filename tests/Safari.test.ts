import SafariRandomnessPredictor from "../src/predictors/Safari";
import { describe, it } from "node:test";
import assert from "node:assert";

const SEQUENCE = [0.8651485656540925, 0.11315724215685208, 0.3153950773233716, 0.45825597860463274];

const EXPECTED = [
  0.31143815234233363, 0.6973996606199063, 0.2146174701215342, 0.098415677735185, 0.6908723218385805, 0.43568239375320583, 0.5537079837658566,
  0.9190574467880481, 0.14789834036423333, 0.8477134504145751, 0.8636173753361875, 0.921914547452633, 0.4377690900199249, 0.759557924932666,
  0.5003933241991145, 0.0589099881389864,
];

describe("Safari", () => {
  it(`should predict the next ${EXPECTED.length} numbers`, async () => {
    const p = new SafariRandomnessPredictor(SEQUENCE);
    const predictions: number[] = [];
    for (let i = 0; i < EXPECTED.length; i++) {
      predictions.push(await p.predictNext());
    }
    assert.deepStrictEqual(EXPECTED, predictions);
  });

  it("should predict correctly when numbers were generated using Array.from({ length: 4 }, Math.random)", async () => {
    const sequence = [0.5446662189932556, 0.7824507874586161, 0.854634073512543, 0.19082643129576304];
    const expected = [
      0.11355859911993271, 0.802205726473946, 0.6528592936773889, 0.23068847564546713, 0.3965784177679563, 0.11078270985315919, 0.5460737278601558,
      0.6663325980209995, 0.5564422294506219, 0.05972441221822922,
    ];

    const p = new SafariRandomnessPredictor(sequence);
    const predictions: number[] = [];

    for (let i = 0; i < expected.length; i++) {
      predictions.push(await p.predictNext());
    }

    assert.deepStrictEqual(expected, predictions);
  });

  it("should predict correctly when numbers were generated by calling Math.random() one at a time", async () => {
    const sequence = [0.4052078078702108, 0.9211149365529028, 0.9775953652479814, 0.3294504915870178];
    const expected = [0.26468035123413713, 0.7182894577138861, 0.8746627632018179, 0.8380006362676743, 0.7864132778964584];

    const p = new SafariRandomnessPredictor(sequence);
    const predictions: number[] = [];

    for (let i = 0; i < expected.length; i++) {
      predictions.push(await p.predictNext());
    }

    assert.deepStrictEqual(expected, predictions);
  });
});
